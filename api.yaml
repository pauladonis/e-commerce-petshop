
swagger: "2.0"
info:
  title: E-commerce Project
  description: First E-commerce REST API built with Node and Express
  version: 1.0
  contact:
    email: pauladonismacavei@gmail.com
  license:
    name: Apache 2.0
    url: "http://apache.org"
  servers:
    -url: "http://localhost:3000"
    description: "This is the local server address" 
    -url: "http://whenitwillbedployed.com"
    description: "This is the deployment server"

schemes: [http, https]

paths: 
  /cart:
    get:
      tags:
        - Cart
      summary: Get all products from cart
      description: Returns all products from cart
      responses:
        '200':    
          description: OK Success
          schema: 
            $ref: "#/components/schemas/Cart"
        '404':    
          description: Cart not found
    post:
      tags:
        - Cart
      summary: Post products to cart
      description: Adding products to cart
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters: 
      - in: body
        name: cart
        schema: 
          type: object
          properties:
            product_id:
              type: integer
            product_name:
              type: string
            amount: 
              type: integer
            user_id:
              type: integer
      responses: 
        '201': 
          description: Cart created
          schema: 
            type: object
            properties:
              product_id:
                type: integer
              product_name:
                type: string
              amount:
                type: integer
              user_id:
                type: integer
        '404': 
          description: Carts not found
  /cart/{cartId}:
    get:
      tags:
        - Cart
      summary: Get cart by Id
      description: Adding a product to cart by Id
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: OK Success
          schema:
            $ref: "#/components/schemas/CartId"
        '404':
          description: Cart not found
    post:
      tags:
        - Cart
      summary: Post to cart by Id
      description: Posts a product from products to cart
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters: 
        - in: path
          name: cartId
          required: true
          enum: [1,2,3,4,5,6,7,8,9,10]
          schema:
            type: integer
            format: int
      responses:
        '201':
          description: Item added to cart
        '400':
          description: Bad Request
    delete: 
      tags: 
        - Cart
      summary: Removes a cart item by Id
      description: Deletes one selection from the cart based on Id
      parameters: 
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
            format: int
      responses: 
        '204': 
          description: Cart item was deleted
  /cart/{cartId}/checkout: 
    post: 
      tags:
        - Cart
      summary: Creates a order based on cart Id
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: Order created
        '404': 
          description: Cart not found
  /register:
    post:
      tags:
        - Users
      summary: User registration
      produces:
        - application/json
      consumes: 
        - application/json 
      parameters:
        - in: body
          name: User details
          required: true
          schema:
            $ref: "#/components/schemas/UserRegistration"
      responses:
        '201': 
          description: User Registered
        '400':
          description: Bad Request 
  /login:
    post:
      tags:
        - Users
      summary: User login
      description: Logging a user
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters: 
        - in: body
          name: User details
          required: true
          schema: 
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: You are now logged in
        '401':
          description: Login failure
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Returns all users from users
      responses:
        '200':    
          description: OK Success
          schema: 
            $ref: "#/components/schemas/Users"
        '404':    
          description: Page not found
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Deletes a user by email and password
      parameters:
        - in: body
          name: User details
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '204': 
          description: User deleted
        '400':
          description: Bad Request
  /users/{userId}:
    get:
      tags: 
        - Users
      summary: Get user by ID
      description: Returns a user by ID from users
      parameters:
        - in: path
          name: userId
          required: true
          enum: [1,2,3,4]
          schema:
            type: integer
            format: int
      responses:
        '200': 
          description: OK Success
          schema:
            $ref: "#/components/schemas/UserId"
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update user details
      description: Updates user details
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters: 
        - in: body
          name: User
          schema: 
            $ref: "#/components/schemas/UserId"
      responses:
        '200': 
          description: OK Success
          schema:
            $ref: "#/components/schemas/UserId"
        '400':
          description: Bad Request  
  /products:
    get:
      tags:
        - Products
      summary: Get products by category
      description: Returns an array of products from the chosen category
      parameters:
        - in: query
          name: category
          required: true
          schema:
            type: string
            format: string
      responses:  
        '200':    
          description: OK Success
          schema:
            $ref: "#/components/schemas/Products"
        '400':    
          description: Page not found
    put:
      tags:
        - Products
      summary: Update product details
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters: 
        - in: body
          name: Product
          required: true
          schema: 
            $ref: "#/components/schemas/ProductId"
      responses:
        '200': 
          description: OK Success
          schema:
            $ref: "#/components/schemas/ProductId"
        '400':
          description: Bad Request
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Returns a product by ID from existing products
      parameters:
        - in: path
          name: productId
          required: true
          enum: [1,2,3,4,5,6,7,8,9,10]
          type: integer
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: OK Success
          schema:
            $ref: "#/components/schemas/ProductId"
        '400':
          description: Product not found
    delete:
      tags:
        - Products
      summary: Removes a product by ID
      parameters:
        - in: path
          name: productId
          required: true
          enum: [1,2,3,4,5,6,7,8,9,10]
          type: integer
          schema:
            type: integer
            format: int
      responses: 
        '204':
          description: Product deleted
        '400':
          description: Bad Request
        '500':
          description: Internal server error 
  /orders:
    get:
      tags: 
        - Orders
      summary: Get all orders 
      description: Returns all orders
      responses:
        '200':    
          description:
          schema:
            $ref: "#/components/schemas/Orders"
        '404':    
          description: Page not found
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Returns an order by ID
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int
      responses:
        '200':
          description:
          schema:
            $ref: "#/components/schemas/OrderId"
        '404':
          description: Order not found        
           
          

components:
  schemas:
    Cart:
      type: array
      items: 
        type: object
        properties:
          product_id:
            type: integer
          id:
            type: integer
          product_name:
            type: string
          amount:
            type: integer
          user_id:
            type: integer
    CartId:
      type: object
      properties:
        product_id:
          type: integer
        id:
          type: integer
        product_name:
          type: string
        amount:
          type: integer
        user_id:
          type: integer
    Users:
      type: array
      items: 
        type: object
        properties:
          id:
            type: integer
          email:
            type: string
          password:
            type: string
          full_name:
            type: string
          billing_address:
            type: string
          shipping_address:
            type: string
          phone: 
            type: integer
    UserId:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
        full_name:
          type: string
        billing_address:
          type: string
        shipping_address:
          type: string
        phone: 
          type: integer
    UserRegistration:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        full_name:
          type: string
        billing_address:
          type: string
        shipping_address:
          type: string
        phone: 
          type: integer
    Products:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          description:
            type: string
          category:
            type: string
          price: 
            type: integer
          stock: 
            type: integer
    ProductId:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price: 
          type: integer
        stock: 
          type: integer
    Orders:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
          ammount:
            type: integer
          order_address:
            type: varchar
          product_id:
            type: integer
    OrderId:
      type: object
      properties:
        id:
          type: integer
        ammount:
          type: integer
        order_address:
          type: varchar
        product_id:
          type: integer